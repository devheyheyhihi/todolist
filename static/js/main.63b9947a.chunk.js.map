{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItems.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dyaName","weekday","className","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","onClick","React","memo","TodoListBlock","TodoList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63b9947a.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width: 512px;\r\n    height: 768px;\r\n\r\n    position: relative; /* 추후 박스 하단에 추가 버튼을 위치시키기 위한 설정 */\r\n    background: white;\r\n    border-radius: 16px;\r\n    box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n    margin: 0 auto; /* 페이지 중앙에 나타나도록 설정 */\r\n\r\n    margin-top: 32px;\r\n    margin-bottom: 32px;\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nfunction TodoTemplate({children}) {\r\n    return (\r\n        <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n    );\r\n}\r\n\r\nexport default TodoTemplate;","import React, {useReducer, createContext, useContext, useRef} from 'react';\r\nconst initialTodos = [\r\n    {\r\n        id: 1,\r\n        text: '프로젝트 생성하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: '컴포넌트 스타일링하기',\r\n        done: true\r\n    },\r\n    {\r\n        id: 3,\r\n        text: 'Context 만들기',\r\n        done: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: '기능 구현하기',\r\n        done: false\r\n    }\r\n];\r\n\r\nfunction todoReducer(state, action) {\r\n    switch(action.type){\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE' :\r\n            return state.map(todo => todo.id ===action.id?{\r\n                ...todo, done: !todo.done\r\n            }: todo);\r\n        case 'REMOVE' :\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default:\r\n            throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({children}) {\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n    const nextId = useRef(5);\r\n    return (\r\n        <TodoStateContext.Provider value = {state}>\r\n            <TodoDispatchContext.Provider value = {dispatch}>\r\n                <TodoNextIdContext.Provider value ={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTodoState() {\r\n    const context =  useContext(TodoStateContext);\r\n    if (!context) {\r\n        throw new Error('Cannot find TodoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n    const context =  useContext(TodoDispatchContext);\r\n    if (!context) {\r\n        throw new Error('Cannot find TodoProvider');\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n    return useContext(TodoNextIdContext);\r\n    const context =  useContext(TodoNextIdContext);\r\n    if (!context) {\r\n        throw new Error('Cannot find TodoProvider');\r\n    }\r\n    return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding: 48px 32px 24px;\r\n    border-bottom: 1px solid #e9ecef;\r\n    h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n    }\r\n    .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n    }\r\n    .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead () {\r\n    const todos = useTodoState();\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR',{\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n    });\r\n    const dyaName = today.toLocaleDateString('ko-KR',{\r\n        weekday: 'long'\r\n    });\r\n\r\n    return(\r\n        <TodoHeadBlock>\r\n            <h1>{dateString}</h1>\r\n            <div className=\"day\">{dyaName}</div>\r\n            <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    );\r\n}\r\n\r\nexport default TodoHead;","import React from 'react';\r\nimport styled ,{css} from 'styled-components';\r\nimport {MdDone, MdDelete} from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst Remove = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n    }\r\n    display: none;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n        ${Remove} {\r\n            display: initial;\r\n        }\r\n    }\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n\r\n    ${props =>\r\n    props.done &&\r\n    css`\r\n        border: 1px solid #38d9a9;\r\n        color: #38d9a9;\r\n        `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props =>\r\n    props.done &&\r\n    css`\r\n        color: #ced4da;\r\n        `}\r\n`;\r\n\r\nfunction TodoItem ({id,done,text}) {\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => \r\n        dispatch({\r\n            type: 'TOGGLE',\r\n            id\r\n        });\r\n    const onRemove = () =>\r\n        dispatch({\r\n            type: 'REMOVE',\r\n            id\r\n        });\r\n    return (\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick = { onToggle }>\r\n                {done && <MdDone />}</CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={onRemove}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoItem);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\nimport TodoItem from './TodoItems'\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex: 1;\r\n    padding: 20px 32px 48px;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst TodoList = () => {\r\n    const todos = useTodoState();\r\n    return (\r\n        <TodoListBlock>\r\n            {todos.map(todo => (\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    text={todo.text}\r\n                    done={todo.done}\r\n                />\r\n            ))}\r\n        </TodoListBlock>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React,{useState} from 'react';\r\nimport styled,{css} from 'styled-components';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n    background: #38d9a9;\r\n    &:hover {\r\n        background: #63e6be;\r\n    }\r\n    &:active {\r\n        background: #20c997;\r\n    }\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: block;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 60px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    transform: translate(-50%, 50%);\r\n    color: white;\r\n    border-radius: 50%;\r\n    border: none;\r\n    outline: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    transition: 0.125s all;\r\n    ${props => props.open&&css`\r\n    background: #ff6b6b;\r\n        &:hover {\r\n            background: #ff8787;\r\n        }\r\n        &:active {\r\n            background: #fa5252;\r\n        }\r\n        transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    background: #f8f9fa;\r\n    padding-left: 32px;\r\n    padding-top: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 72px;\r\n\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n    border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = e => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'CREATE',\r\n            todo: {\r\n                id: nextId.current,\r\n                text: value,\r\n                done: false,\r\n            }\r\n        });\r\n        setValue('');\r\n        setOpen(false);\r\n        nextId.current += 1;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {open && (\r\n                <InsertFormPositioner>\r\n                    <InsertForm onSubmit={onSubmit}>\r\n                        <Input placeholder='할 일을 입력 후 Enter를 누르세요.' autoFocus\r\n                            onChange={onChange}\r\n                            value = {value}\r\n                        />\r\n                    </InsertForm>\r\n                </InsertFormPositioner>\r\n            )}\r\n            <CircleButton onClick={onToggle} open={open}>\r\n                <MdAdd/>\r\n            </CircleButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoCreate);","import './App.css';\nimport React from 'react';\nimport {createGlobalStyle} from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead/>\n        <TodoList/>\n        <TodoCreate/>\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}